name: CI/CD

on:
  push:
#    branches:
#      - "sub/*"
#      - "feature/*"
#      - "fix/*"

  pull_request:
    branches:
#      - development
      - production
#      - master

jobs:
  build-test:
    name: Base test

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 12.x ]

    outputs:
      output1: ${{ steps.installed_dependencies.outputs }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Run the tests and generate coverage report
        run: npm run test-coverage

#      - name: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        if: github.ref == 'refs/heads/production'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

      - name: Build
        run: npm run build

      - name: Set tag name output
        id: set_tag_name
        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}

      - name: Get version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.5
        if: github.ref == 'refs/heads/production'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: github.ref == 'refs/heads/production'
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}


      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/production'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

#      - name: Sync AWS S3 bucket
#        uses: jakejarvis/s3-sync-action@2fb81a9e9fea11e078587911c27754e42e6a6e88
#        with:
#          args: --exclude '.git*/*' --delete --follow-symlinks
#        env:
#          SOURCE_DIR: './dist'
#          AWS_REGION: 'us-east-1'
#          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET_NAME }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Update AWS Cloudfront cache with S3 bucket
#        uses: chetan/invalidate-cloudfront-action@master
#        env:
#          DISTRIBUTION: ${{ secrets.AWS_DISTRIBUTION_ID }}
#          PATHS: '/index.html /main.js /main.js.gz /vendors~main.js /vendors~main.js.gz'
#          AWS_REGION: 'us-east-1'
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name:  Sync AWS S3 bucket
        if: github.ref == 'refs/heads/production'
        run: |
          aws s3 sync ./dist s3://${{ secrets.AWS_S3_BUCKET_NAME }}/

      - name: Update AWS cloudfront cache with S3 bucket
        if: github.ref == 'refs/heads/production'
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_DISTRIBUTION_ID }} --paths "/*"
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#      - name: Deploy
#        if: github.ref == 'refs/heads/production'
#        run: |
#          git config --global user.name $user_name
#          git config --global user.email $user_email
#          git remote set-url origin https://${github_token}@github.com/${repository}
#          npm run deploy
#        env:
#          user_name: 'github-actions[bot]'
#          user_email: 'github-actions[bot]@users.noreply.github.com'
#          github_token: ${{ secrets.ACTIONS_DEPLOY_ACCESS_TOKEN }}
#          repository: ${{ github.repository }}
