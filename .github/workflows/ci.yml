name: CI/CD

on:
  push:

  pull_request:
    branches: [ development ]

jobs:
  base_test:
    name: Base test

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 12.x ]

    outputs:
      output1: ${{ steps.installed_dependencies.outputs }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Run the tests and generate coverage report
        run: npm run test-coverage

  build_test:
    name: Build test

    needs: [ base_test ]

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 12.x ]

    steps:
      - name: Build
        run: npm run build

#  build_check_code:
#    name: Build check code
#
#    needs: [ build_base ]
#
#    runs-on: ubuntu-latest
#
#    strategy:
#      matrix:
#        node-version: [ 12.x, 13.x ]
#
#    steps:
#      - name: Run the tests and generate coverage report
#        run: npm run test-coverage

#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    strategy:
#      matrix:
#       node-version: [13.x]
#
#    steps:
#    - name: Checkout repository
#      uses: actions/checkout@v2
#      with:
#        persist-credentials: false
#        fetch-depth: 0
#
#    - name: Set up Node.js ${{ matrix.node-version }}
#      uses: actions/setup-node@v1
#      with:
#        node-version: ${{ matrix.node-version }}
#
#    - name: Cache dependencies
#      uses: actions/cache@v2
#      with:
#        path: |
#          **/node_modules
#        key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
#
#    - name: Install dependencies
#      run: npm install
#
#    - name: Run the tests and generate coverage report
#      run: npm run test-coverage
#
#    - name: Upload coverage to Codecov
#      uses: codecov/codecov-action@v1
#      with:
#        token: ${{ secrets.CODECOV_TOKEN }}
#
#    - name: Build
#      run: npm run build
#
#    - name: Deploy
#      run: |
#        git config --global user.name $user_name
#        git config --global user.email $user_email
#        git remote set-url origin https://${github_token}@github.com/${repository}
#        npm run deploy
#      env:
#        user_name: 'github-actions[bot]'
#        user_email: 'github-actions[bot]@users.noreply.github.com'
#        github_token: ${{ secrets.ACTIONS_DEPLOY_ACCESS_TOKEN }}
#        repository: ${{ github.repository }}
